var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"CurrentModule = SodiumSeal","category":"page"},{"location":"#SodiumSeal-1","page":"Home","title":"SodiumSeal","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"SodiumSeal wraps libsodium's sealed boxes.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [SodiumSeal]","category":"page"},{"location":"#SodiumSeal.KeyPair","page":"Home","title":"SodiumSeal.KeyPair","text":"KeyPair([public[, secret]])\n\nConstruct a new KeyPair with existing keys, or generate a new one. If the keys are AbstractStrings, they are assumed to be Base64-encoded. If you are only interested in encrypting, you need not supply the secret key.\n\n\n\n\n\n","category":"type"},{"location":"#SodiumSeal.seal-Tuple{AbstractString,KeyPair}","page":"Home","title":"SodiumSeal.seal","text":"seal(plaintext, keypair::KeyPair) -> Union{String, Vector{UInt8}}\n\nEncrypt some data.\n\nIf plaintext is an AbstractString, it is assumed to be Base64-encoded, and the output is also a Base64-encoded String. Otherwise, it is a Vector{UInt8}.\n\n\n\n\n\n","category":"method"},{"location":"#SodiumSeal.unseal-Tuple{AbstractString,KeyPair}","page":"Home","title":"SodiumSeal.unseal","text":"unseal(ciphertext, keypair::KeyPair) -> Union{String, Vector{UInt8}}\n\nDecrypt some data.\n\nIf ciphertext is an AbstractString, it is assumed to be Base64-encoded, and the output is also a Base64-encoded String. Otherwise, it is a Vector{UInt8}.\n\n\n\n\n\n","category":"method"}]
}
